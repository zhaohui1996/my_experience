    # 在python中，主要分了4个大类的名字空间:

    # G ： global	全局名字空间
    # E ： enclosed	闭包名字空间
    # L ： local		局部名字空间
    # B ： Builtin	内置名字空间


# 在python中，可以通过=号进行变量的操作，比如：
# 	a = 10
# 	b = 100

# 在python中，会引入一个叫做名字空间的字典类型来保存所有的变量名称。
# a_namespace = {'name_a':object_1, 'name_b':object_2, ...}
# b_namespace = {'name_a':object_3, 'name_b':object_4, ...}

# __name__： 当前文件执行时，模块名称
# __file__： 当前文件绝对路径
# __builtins__：内置变量的名字空间

# 【原则】: LEGB
# Local -> Enclosed -> Global -> Built-in

# 总结:
    # #     python的变量名实际是字典的Key；变量的值，是字典的value；
    # #     python的变量名只是一个标识符，可以指向任意的空间，它的核心是等号右边的空间。
    # #     当遇到一个变量名时，首先在最近的名字空间中，查看是否有这个key值，
    # #         若没有，则将等号右边的内容作为value创建这个K-V对。
    # #         若有，则将等号右边的内容更新到这个key值对应的value。
# 在python中，变量值和变量名，是以字典结构的K-V对进行维护的。这些保存KV对的空间，就称之为命名空间。
# 当python读取一个变量的值时，会按照LEGB原则进行空间的查找，也就是说先在局部空间查找有没有这个key值，如果有，则读取，若没有，再向上一级空间查找，依次类推。若都没有，才会抛出异常。
# 不过python在写一个变量时，只会在Local空间操作，当空间没有该变量时，就会像字典那样，创建一个新的变量，如果想操作全局空间，则必须借助global关键字。