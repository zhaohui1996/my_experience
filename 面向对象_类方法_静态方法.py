"""
所以python的类也是一个对象，称为类对象。（逆向证明：只要拥有属性或者方法的就是一个对象，类具有类属性就说明类是一个对象）
既然类也是一个对象，就可以给类对象上添加方法，这个方法就称为类方法。
类方法的定义：
    1.必须使用装饰器@classmethod来标识方法为类方法
    2.Python解释器自动将类对象传入给类方法的第一个参数，通常情况使用cls(class缩写)作为类方法的第一个形式参数，调用的时候不用传该参数
    3.类方法所有对象共享，所以可以通过类或者实例对象进行调用
"""
class Aaa(object):
    @classmethod
    def aaa(cls):
        pass
"""
类方法的使用好处：
    1.类方法不用创建对象直接可以通过类名调用，简单方便
    2.为了起到对类属性的保护作用，通常将类属性设置为私有的，再通过类方法来获取和设置类属性
"""
"""
静态方法
    静态方法，需要通过修饰器@staticmethod来修饰，静态方法不需要额外定义参数
语法：
"""
class Bbb(object):
    @staticmethod
    def bbb():
        pass
"""
1.我们可以在类的外面定义一个普通的函数，但是这并不符合python中面向对象的语法，面向对象语法要求要有类有对象。所以当将一个普通的函数放到类中，就成为了方法，而这个方法不需要传入实例对象或者类作为参数，这样的方法就是静态方法
2.静态方法可以通过类或者对象调用


"""
"""
总结:
    1.类方法使用 @classmethod 装饰器，可以使用类（也可使用实例）来调用方法。
    2.静态方法使用 @staticmethod 装饰器，它是跟类有关系但在运行时又不需要实例和类参与的方法，可以使用类和实例来调用。
    3.工作中通常访问类方法或者静态方法都使用类名访问，简单方便
"""